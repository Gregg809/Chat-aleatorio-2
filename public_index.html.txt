
```html
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Videochat Aleatorio</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body { background: #222; color: white; font-family: Arial; text-align: center; }
    #videos { display: flex; justify-content: center; gap: 10px; margin-top: 20px; }
    video { width: 45%; border-radius: 10px; background: black; }
    button { padding: 10px 20px; background: #e33; color: white; border: none; border-radius: 5px; margin-top: 15px; }
  </style>
</head>
<body>

<h2>Videochat Aleatorio</h2>
<div id="videos">
  <video id="localVideo" autoplay muted playsinline></video>
  <video id="remoteVideo" autoplay playsinline></video>
</div>
<button id="nextBtn">Siguiente</button>

<script>
const socket = io();
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
 = document.getElementById('nextBtn');
let pc, room;

async function start() {
  pc = new RTCPeerConnection();
  pc.ontrack = e => remoteVideo.srcObject = e.streams[0];
  pc.onicecandidate = e => {
    if (e.candidate) socket.emit('signal', { room, candidate: e.candidate });
  };

  const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
  localVideo.srcObject = stream;
  stream.getTracks().forEach(track => pc.addTrack(track, stream));
}

function closeConnection() {
  if (pc) {
    pc.close();
    pc = null;
    remoteVideo.srcObject = null;
  }
}

socket.on('matched', async data => {
  room = data.room;
  await start();
  const offer = await pc.createOffer();
  await pc.setLocalDescription(offer);
  socket.emit('signal', { room, desc: offer });
});

socket.on('signal', async data => {
  if (data.desc) {
    await pc.setRemoteDescription(data.desc);
    if (data.desc.type === 'offer') {
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      socket.emit('signal', { room, desc: answer });
    }
  } else if (data.candidate) {
    await pc.addIceCandidate(data.candidate).catch(() => {});
  }
});

nextBtn.onclick = () => {
  closeConnection();
  socket.emit('next');
};

socket.emit('next');


</body>
</html>
```